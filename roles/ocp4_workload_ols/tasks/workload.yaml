# Implement your Workload deployment tasks here
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

# Ensure that the openshift-lightspeed namespace is always created
- name: Ensure openshift-lightspeed namespace exists
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: openshift-lightspeed
    state: present
  register: ols_namespace_result

# Install the OLS Operator
- name: Install OLS Operator
  when: ocp4_workload_ols_install_operator | bool
  include_tasks: install_ols_operator.yaml

# Configure OLS
- name: Configure OLS
  block:
    # Setup Azure AI Cognitive Services (Token-based authentication)
    - name: Setup Azure AI Cognitive Services
      when: ocp4_workload_ols_token | bool
      include_tasks: setup_azure_token.yaml

    # Create authentication secrets based on auth type
    - name: Create authentication secret
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', _secret_template) }}"
        wait: true
        wait_timeout: 300
      vars:
        _secret_template: >-
          {{ 'templates/create_secret_token.yaml.j2' if ocp4_workload_ols_token
             else 'templates/create_secret.yaml.j2' }}

    - name: Create Azure App Service Principal Secret
      when: ocp4_workload_ols_token | bool
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'templates/create_azure_api_token.yaml.j2') }}"
        wait: true
        wait_timeout: 300

    # Create OLSConfig based on auth type
    - name: Create OLSConfig
      when: ocp4_workload_ai_platform is defined
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', _olsconfig_template) }}"
        wait: true
        wait_timeout: 300
      vars:
        _olsconfig_template: >-
          {{ 'templates/install_azure_app_sp_olsconfig.yaml.j2' if ocp4_workload_ols_token
             else 'templates/install_' + ocp4_workload_ai_platform + '_olsconfig.yaml.j2' }}

# Create broken pod for demo/testing purposes
- name: Create broken pod for demo
  when: ocp4_workload_ols_create_broken_pod | default(false)
  kubernetes.core.k8s:
    definition: "{{ lookup('ansible.builtin.template', 'templates/deploy_faulty_pod.yaml.j2') }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
