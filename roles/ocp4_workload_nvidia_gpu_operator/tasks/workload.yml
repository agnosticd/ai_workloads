---
# Check to make sure NFD Operator has been installed

- name: Check for NodeFeatureDiscovery objects
  kubernetes.core.k8s_info:
    api_version: nfd.openshift.io/v1
    kind: NodeFeatureDiscovery
  register: r_nfd_objects

- name: Fail if no NodeFeatureDiscovery objects found
  ansible.builtin.fail:
    msg: "No NodeFeatureDiscovery objects found. Please install and configure the Node Feature Discovery operator before installing the NVIDIA GPU operator."
  when: r_nfd_objects.resources | length == 0

- name: Install NVIDIA GPU operator
  ansible.builtin.include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_name: gpu-operator-certified
    install_operator_namespace: "{{ ocp4_workload_nvidia_gpu_operator_namespace }}"
    install_operator_channel: "{{ ocp4_workload_nvidia_gpu_operator_channel }}"
    install_operator_manage_namespaces:
    - "{{ ocp4_workload_nvidia_gpu_operator_namespace }}"
    install_operator_catalog: certified-operators
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_nvidia_gpu_operator_automatic_install_plan_approval }}"
    install_operator_starting_csv: "{{ ocp4_workload_nvidia_gpu_operator_starting_csv }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_nvidia_gpu_operator_use_catalog_snapshot }}"
    install_operator_catalogsource_name: "{{ ocp4_workload_nvidia_gpu_operator_catalogsource_name }}"
    install_operator_catalogsource_namespace: "{{ ocp4_workload_nvidia_gpu_operator_namespace }}"
    install_operator_catalogsource_image: "{{ ocp4_workload_nvidia_gpu_operator_catalog_snapshot_image }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_nvidia_gpu_operator_catalog_snapshot_image_tag }}"

- name: Setup NVIDIA GPU Cluster Policy
  kubernetes.core.k8s:
    state: present
    src: nvidia_gpu_clusterpolicy.json

- name: Wait for ClusterPolicy to be ready
  kubernetes.core.k8s_info:
    api_version: nvidia.com/v1
    kind: ClusterPolicy
    namespace: "{{ ocp4_workload_nvidia_gpu_operator_namespace }}"
    wait: true
    wait_condition:
      type: Ready
      status: "True"
      reason: Reconciled
    wait_timeout: 600

- name: Setup NVIDIA DCGM Exporter Dashboard
  when: ocp4_workload_nvidia_gpu_operator_create_dashboard | bool
  block:
  - name: Check if NVIDIA DCGM Exporter Dashboard ConfigMap exists
    kubernetes.core.k8s_info:
      api_version: v1
      kind: ConfigMap
      name: nvidia-dcgm-exporter-dashboard
      namespace: openshift-config-managed
    register: r_dcgm_dashboard_configmap

  - name: Setup NVIDIA DCGM Exporter Dashboard if it doesn't exist
    when: r_dcgm_dashboard_configmap.resources | length == 0
    block:
    - name: Fetch and format DCGM dashboard JSON
      ansible.builtin.uri:
        url: "{{ ocp4_workload_nvidia_gpu_operator_dcgm_exporter_dashboard_url }}"
        method: GET
        return_content: true
      register: r_dcgm_dashboard_json

    - name: Create NVIDIA DCGM Exporter Dashboard ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: nvidia-dcgm-exporter-dashboard
            namespace: openshift-config-managed
            labels:
              console.openshift.io/dashboard: "true"
              console.openshift.io/odc-dashboard: "true"
          data:
            dcgm-exporter-dashboard.json: |
              {{ r_dcgm_dashboard_json.content | from_json | to_nice_json(indent=2) }}
